module = { SOI ~ expressions* ~ EOI }

expression               = {
    import
  | number
  | block
  | string
  | macro
  | precomp
  | export
  | enum
  | array
  | for_loop
  | if_tree
  | elseif_tree
  | else_block
  | logic_conditionals
  | interface_def
  | object_def
  | component_def
  | external_symbol
  | external_block
  | fn_header_def
  | function_def
  | function_call
  | object_instantiation
  | match_tree
  | bitwise_operation
  | variable_assignment
  | function_return_value
  | value_assignment
  | variable_declaration
  | variable_access
  | contextual_variable_access
  | function_component_call
  | OPERAND
  | UNARY_OPERATOR
}
parenthesised_expression = { "(" ~ expression* ~ ")" }

expressions = _{ expression | parenthesised_expression }

// Imports and exports in modules.
import             = { "import" ~ "{" ~ (import_name ~ ("," ~ import_name)*)? ~ "}" ~ "from" ~ import_module_path }
import_module_path = { string }
import_name        = { IDENT ~ import_name_alias? }
import_name_alias  = { "as" ~ IDENT }
export             = { "export" ~ expressions }

// Variables.
variable_declaration       = { mutability_selector ~ IDENT ~ elp_type? }
variable_assignment_target = { variable_declaration | variable_access }
variable_assignment        = { variable_assignment_target ~ value_assignment }
value_assignment           = { OPERAND ~ expression }
variable_access            = { pointer_semantics* ~ variable_access_names }
variable_access_names      = { !KEYWORD ~ IDENT ~ ("." ~ IDENT)* }
pointer_semantics          = { POINTER | REFERENCE }
contextual_variable_access = { "." ~ IDENT }

// Programming type info.
mutability_selector         = { VAR | CONST }
visibility_selector         = { PUBLIC | PRIVATE }
elp_type_parameter          = { IDENT ~ elp_type_generic? }
elp_type_array              = { "[" ~ elp_type_parameter ~ "]" }
elp_type_value              = { elp_type_parameter | elp_type_array }
elp_type                    = { pointer_semantics? ~ mutability_selector? ~ elp_type_value }
elp_type_generic            = { "<" ~ elp_type_generic_param ~ ("," ~ elp_type_generic_param)* ~ ">" }
elp_type_generic_param      = { elp_type ~ elp_type_generic_constraint? }
elp_type_generic_constraint = { ":" ~ elp_type ~ ("+" ~ elp_type)* }

enum        = { "enum" ~ IDENT ~ object_implements? ~ "{" ~ (enum_member ~ ("," ~ enum_member)* ~ ","?)? ~ "}" }
enum_member = { "." ~ IDENT ~ ("(" ~ elp_type ~ ("," ~ elp_type)* ~ ")")? }

interface_def              = { "interface" ~ IDENT ~ elp_type_generic? ~ "{" ~ (interface_member ~ ("," ~ interface_member)*) ~ "}" }
interface_member_key_value = { visibility_selector? ~ "." ~ IDENT ~ elp_type }
interface_member           = { (interface_member_key_value | fn_header_def) }

// C interop
external_block  = { "external" ~ "{" ~ (fn_header_def | object_def)* ~ "}" }
external_symbol = { "external" ~ (fn_header_def | object_def) }

// Functions.
fn_header_def           = { pointer_semantics? ~ "fn" ~ variable_access ~ elp_type_generic? ~ function_arguments ~ function_return_type }
function_def            = { "fn" ~ variable_access ~ elp_type_generic? ~ function_arguments? ~ function_return_type? ~ block }
function_return_type    = { ARROW ~ elp_type ~ ("," ~ elp_type)* }
function_arguments      = { "(" ~ (function_argument ~ ("," ~ function_argument)*)? ~ ","? ~ ")" }
function_argument       = { pointer_semantics? ~ IDENT ~ elp_type? }
function_component_call = { function_call ~ block }
function_call           = { function_call_name ~ elp_type_generic? ~ "(" ~ (expressions ~ ("," ~ expression)*)? ~ ","? ~ ")" }
function_call_name      = { (variable_access | contextual_variable_access) }
function_return_value   = { "return" ~ expressions }

// Objects.
object_def               = { "object" ~ IDENT ~ elp_type_generic? ~ object_implements? ~ "{" ~ (object_member ~ ("," ~ object_member)* ~ ","?)? ~ "}" }
object_implements        = { "implements" ~ elp_type ~ ("," ~ elp_type)* }
object_member            = { visibility_selector? ~ mutability_selector? ~ "." ~ IDENT ~ elp_type? ~ object_key_default_value? ~ object_key_tags? }
object_key_default_value = { "=" ~ expressions }
object_key_tags          = { "`" ~ IDENT ~ ":" ~ string ~ ("," ~ IDENT ~ ":" ~ string)? ~ "`" }

// Object instantiation
object_instantiation        = { IDENT ~ "{" ~ object_instantiation_member ~ ("," ~ object_instantiation_member)* ~ ","? ~ "}" }
object_instantiation_member = { (object_value_spread | ("." ~ IDENT ~ "=" ~ expressions)) }
object_value_spread         = { "..." ~ expressions }

// Components
component_def = { "component" ~ variable_access ~ elp_type_generic? ~ function_arguments? ~ function_return_type? ~ block }

// If, elseif, else
if_tree            = { "if" ~ expressions+ ~ "then" ~ block }
elseif_tree        = { "elseif" ~ expressions+ ~ "then" ~ block }
else_block         = { "else" ~ block }
logic_conditionals = { OR | NOT | IS | AND }

// Matches.
match_tree        = { "match" ~ expressions ~ "{" ~ match_arm+ ~ "}" }
match_arm_subject = { match_range | expression }
match_arm         = { match_arm_subject ~ ARROW ~ match_arm_body ~ ","? }
match_arm_body    = { block | expressions }
match_range       = { expression? ~ ".." ~ expressions? }

// Arrays.
array = { "[" ~ expressions ~ ("," ~ expressions)* ~ ","? ~ "]" }

// Loops
for_loop = { "for" ~ expressions ~ "in" ~ expressions ~ block }

// Groups of expressions.
block = { "{" ~ expressions* ~ "}" }

// Meta programming tooling.
macro   = { "@" ~ IDENT ~ ("(" ~ elp_type ~ ")")? }
precomp = { "#" ~ IDENT ~ ("(" ~ elp_type ~ ")")? }

// helpers.
string = ${ "\"" ~ inner ~ "\"" }
inner  = @{ char* }
char   =  {
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
number = @{
    "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT+)? ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

// Lexer tokens
ARROW      = _{ "->" }
IDENT      = @{ !number ~ (ASCII_ALPHANUMERIC+ | "_")+ }
REFERENCE  =  { "&" }
POINTER    =  { "*" }
COMMENT    = _{ "//" ~ (!"\n" ~ ANY)* }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
VAR        =  { "var" }
CONST      =  { "const" }
PUBLIC     =  { "public" }
PRIVATE    =  { "private" }
OR         =  { "or" }
NOT        =  { "not" }
IS         =  { "is" }
AND        =  { "and" }
KEYWORD    = @{
    VAR
  | CONST
  | PUBLIC
  | PRIVATE
  | OR
  | NOT
  | IS
  | AND
  | "external"
  | "then"
  | "as"
  | "if"
  | "elseif"
  | "else"
  | "match"
  | "component"
  | "interface"
  | "object"
  | "implements"
}

// Everything below here is a mess and I'm in various states of confusion about what my head was doing but I'll come back round to this nonsense.

// Bitwise
bitwise_operation = { (variable_access | number) ~ BITWISE_OPERAND ~ (variable_access | number) }

// unary operators.
UNARY_ADD      = { "+" }
UNARY_SUB      = { "-" }
UNARY_MULT     = { "*" }
UNARY_DIV      = { "/" }
UNARY_POW      = { "^" }
UNARY_MOD      = { "%" }
UNARY_OPERATOR = {
    UNARY_ADD
  | UNARY_SUB
  | UNARY_MULT
  | UNARY_DIV
  | UNARY_POW
  | UNARY_MOD
}

// operations.
BITWISE_OPERAND_TILDE       = { "~" }
BITWISE_OPERAND_LEFT_SHIFT  = { "<<" }
BITWISE_OPERAND_RIGHT_SHIFT = { ">>" }
BITWISE_OPERAND_OR          = { "|" }
BITWISE_OPERAND             = {
    BITWISE_OPERAND_TILDE
  | BITWISE_OPERAND_LEFT_SHIFT
  | BITWISE_OPERAND_RIGHT_SHIFT
  | BITWISE_OPERAND_OR
  | REFERENCE
}

OPERAND_BITAND        = { "&=" }
OPERAND_PLUS          = { "+=" }
OPERAND_MINUS         = { "-=" }
OPERAND_MUL           = { "*=" }
OPERAND_DIV           = { "/=" }
OPERAND_MOD           = { "%=" }
OPERAND_POW           = { "^=" }
OPERAND_EQUAL         = { "==" }
OPERAND_NOT_EQUAL     = { "!=" }
OPERAND_BIT_NOT_EQUAL = { "~=" }
OPERAND_EQUALS        = { "=" }
OPERAND               = {
    OPERAND_PLUS
  | OPERAND_MINUS
  | OPERAND_MUL
  | OPERAND_DIV
  | OPERAND_MOD
  | OPERAND_POW
  | OPERAND_BITAND
  | BITWISE_OPERAND_OR
  | OPERAND_BIT_NOT_EQUAL
  | OPERAND_EQUAL
  | OPERAND_NOT_EQUAL
  | OPERAND_EQUALS
}
